// Generated by CoffeeScript 1.8.0
(function() {
  var InfluxDB,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.InfluxDB = InfluxDB = (function() {
    function InfluxDB(opts) {
      var _ref;
      if (!opts) {
        opts = {};
      }
      this.host = opts.host || "localhost";
      this.hosts = opts.hosts || [this.host];
      this.port = opts.port || 8086;
      this.username = opts.username || "root";
      this.password = opts.password || "root";
      this.database = opts.database;
      this.ssl = opts.ssl || false;
      this.max_retries = opts.max_retries || 20;
      this.isCrossOrigin = (_ref = window.location.host, __indexOf.call(this.hosts, _ref) < 0);
      this.username = encodeURIComponent(this.username);
      this.password = encodeURIComponent(this.password);
    }


    /*
     * Databases
     *
     * GET    /db
     * POST   /db
     * DELETE /db/:db
     */

    InfluxDB.prototype.getDatabases = function() {
      return this.get(this.path("db"));
    };

    InfluxDB.prototype.createDatabase = function(databaseName, callback) {
      var data;
      data = {
        name: databaseName
      };
      return this.post(this.path("db"), data, callback);
    };

    InfluxDB.prototype.deleteDatabase = function(databaseName) {
      return this["delete"](this.path("db/" + databaseName));
    };


    /*
     * Cluster Configs
     *
     * GET /cluster/database_configs/:db
     */

    InfluxDB.prototype.getClusterConfiguration = function() {
      return this.get(this.path("cluster/configuration"));
    };


    /*
     * Database Configs
     *
     * POST   /cluster/database_configs/:db
     */

    InfluxDB.prototype.createDatabaseConfig = function(databaseName, data, callback) {
      return this.post(this.path("cluster/database_configs/" + databaseName), data, callback);
    };


    /*
     * Database Users
     *
     * GET  /db/:db/users
     * POST /db/:db/users
     * GET  /db/:db/user/:name
     * POST /db/:db/user/:name
     * GET  /db/:db/authenticate
     */

    InfluxDB.prototype.getDatabaseUsers = function(databaseName) {
      return this.get(this.path("db/" + databaseName + "/users"));
    };

    InfluxDB.prototype.createUser = function(databaseName, username, password, callback) {
      var data;
      data = {
        name: username,
        password: password
      };
      return this.post(this.path("db/" + databaseName + "/users"), data, callback);
    };

    InfluxDB.prototype.deleteDatabaseUser = function(databaseName, username) {
      return this["delete"](this.path("db/" + databaseName + "/users/" + username));
    };

    InfluxDB.prototype.getDatabaseUser = function(databaseName, username) {
      return this.get(this.path("db/" + databaseName + "/users/" + username));
    };

    InfluxDB.prototype.updateDatabaseUser = function(databaseName, username, params, callback) {
      return this.post(this.path("db/" + databaseName + "/users/" + username), params, callback);
    };

    InfluxDB.prototype.authenticateDatabaseUser = function() {
      return this.get(this.path("db/" + this.database + "/authenticate"));
    };


    /*
     * Cluster Admins
     *
     * GET    /cluster_admins
     * POST   /cluster_admins
     * DELETE /cluster_admins/:username
     * POST   /cluster_admins/:username
     * GET    /cluster_admins/authenticate
     */

    InfluxDB.prototype.getClusterAdmins = function() {
      return this.get(this.path("cluster_admins"));
    };

    InfluxDB.prototype.deleteClusterAdmin = function(username) {
      return this["delete"](this.path("cluster_admins/" + username));
    };

    InfluxDB.prototype.createClusterAdmin = function(username, password, callback) {
      var data;
      data = {
        name: username,
        password: password
      };
      return this.post(this.path("cluster_admins"), data);
    };

    InfluxDB.prototype.updateClusterAdmin = function(username, params, callback) {
      return this.post(this.path("cluster_admins/" + username), params, callback);
    };

    InfluxDB.prototype.authenticateClusterAdmin = function(username, password, callback) {
      return this.get(this.path("cluster_admins/authenticate"));
    };


    /*
     * Continuous Queries
     *
     * GET    /db/:db/continuous_queries
     * POST   /db/:db/continuous_queries
     * DELETE /db/:db/continuous_queries/:id
     */

    InfluxDB.prototype.getContinuousQueries = function(databaseName) {
      return this.get(this.path("db/" + databaseName + "/continuous_queries"));
    };

    InfluxDB.prototype.deleteContinuousQuery = function(databaseName, id) {
      return this["delete"](this.path("db/" + databaseName + "/continuous_queries/" + id));
    };


    /*
     * Cluster Servers & Shards
     *
     * GET    /cluster/servers
     * GET    /cluster/shards
     * POST   /cluster/shards
     * DELETE /cluster/shards/:id
     */

    InfluxDB.prototype.getClusterServers = function() {
      return this.get(this.path("cluster/servers"));
    };

    InfluxDB.prototype.getClusterShardSpaces = function() {
      return this.get(this.path("cluster/shard_spaces"));
    };

    InfluxDB.prototype.getClusterShards = function() {
      return this.get(this.path("cluster/shards"));
    };

    InfluxDB.prototype.createClusterShard = function(startTime, endTime, database, spaceName, serverIds, callback) {
      var data;
      data = {
        database: database,
        spaceName: spaceName,
        startTime: startTime,
        endTime: endTime,
        longTerm: longTerm,
        shards: [
          {
            serverIds: serverIds
          }
        ]
      };
      return this.post(this.path("cluster/shards"), data, callback);
    };

    InfluxDB.prototype.deleteClusterShard = function(id, serverIds) {
      var data;
      data = {
        serverIds: serverIds
      };
      return this["delete"](this.path("cluster/shards/" + id), data);
    };


    /*
     * User Interfaces
     *
     * GET /interfaces
     */

    InfluxDB.prototype.getInterfaces = function() {
      return this.get(this.path("interfaces"));
    };

    InfluxDB.prototype.readPoint = function(fieldNames, seriesNames, callback) {
      var query;
      query = "SELECT " + fieldNames + " FROM " + seriesNames + ";";
      return this.get(this.path("db/" + this.database + "/series", {
        q: query
      }), callback);
    };

    InfluxDB.prototype._readPoint = function(query, callback) {
      return this.get(this.path("db/" + this.database + "/series", {
        q: query
      }), callback);
    };

    InfluxDB.prototype.query = function(query, callback) {
      return this.get(this.path("db/" + this.database + "/series", {
        q: query
      }), callback);
    };

    InfluxDB.prototype.get = function(path, callback) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.retry(resolve, reject, function() {
            return reqwest({
              method: 'get',
              type: 'json',
              url: _this.url(path),
              crossOrigin: _this.isCrossOrigin,
              success: function(data) {
                resolve(data);
                if (callback) {
                  return callback(_this.formatPoints(data));
                }
              }
            });
          });
        };
      })(this));
    };

    InfluxDB.prototype.post = function(path, data, callback) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.retry(resolve, reject, function() {
            return reqwest({
              method: 'post',
              type: 'json',
              url: _this.url(path),
              crossOrigin: _this.isCrossOrigin,
              contentType: 'application/json',
              data: JSON.stringify(data),
              success: function(data) {
                return resolve(data);
              }
            });
          });
        };
      })(this));
    };

    InfluxDB.prototype["delete"] = function(path, data) {
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.retry(resolve, reject, function() {
            return reqwest({
              method: 'delete',
              type: 'json',
              url: _this.url(path),
              crossOrigin: _this.isCrossOrigin,
              data: JSON.stringify(data),
              success: function(data) {
                resolve(data);
                if (typeof callback !== "undefined" && callback !== null) {
                  return callback(data);
                }
              }
            });
          });
        };
      })(this));
    };

    InfluxDB.prototype.formatPoints = function(data) {
      return data.map(function(datum) {
        var series;
        return series = {
          name: datum.name,
          points: datum.points.map(function(p) {
            var point, t;
            point = {};
            datum.columns.forEach(function(column, index) {
              return point[column] = p[index];
            });
            t = new Date(0);
            t.setUTCSeconds(Math.round(point.time / 1000));
            point.time = t;
            return point;
          })
        };
      });
    };

    InfluxDB.prototype.writePoint = function(seriesName, values, options, callback) {
      var data, datum, k, point, v;
      if (options == null) {
        options = {};
      }
      datum = {
        points: [],
        name: seriesName,
        columns: []
      };
      point = [];
      for (k in values) {
        v = values[k];
        point.push(v);
        datum.columns.push(k);
      }
      datum.points.push(point);
      data = [datum];
      return this.post(this.path("db/" + this.database + "/series"), data, callback);
    };

    InfluxDB.prototype.writeSeries = function(seriesData, callback) {
      return this.post(this.path("db/" + this.database + "/series"), seriesData, callback);
    };

    InfluxDB.prototype.path = function(action, opts) {
      var path;
      path = "" + action + "?u=" + this.username + "&p=" + this.password;
      if ((opts != null) && opts.q) {
        path += "&q=" + encodeURIComponent(opts.q);
      }
      return path;
    };

    InfluxDB.prototype.url = function(path) {
      var host;
      host = this.hosts.shift();
      this.hosts.push(host);
      return "" + (this.ssl ? "https" : "http") + "://" + host + ":" + this.port + "/" + path;
    };

    InfluxDB.prototype.retry = function(resolve, reject, callback, delay, retries) {
      if (delay == null) {
        delay = 10;
      }
      if (retries == null) {
        retries = this.max_retries;
      }
      return callback().then(undefined, (function(_this) {
        return function(reason) {
          if (reason.status === 0) {
            return setTimeout(function() {
              return _this.retry(resolve, reject, callback, Math.min(delay * 2, 30000), retries - 1);
            }, delay);
          } else {
            return reject(reason);
          }
        };
      })(this));
    };

    return InfluxDB;

  })();

}).call(this);
